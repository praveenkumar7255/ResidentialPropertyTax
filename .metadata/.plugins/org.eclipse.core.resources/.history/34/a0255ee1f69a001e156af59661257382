package com.example.residentialproperty.entity;

import java.util.Objects;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;

@Entity
@Table(name="ResidentialProperty")
public class ResidentialProperty {
	
    @Id
    @Column
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    public int ID;

    @Column
    @NotNull(message="Assessment Year should not be null")
    @Size(min=4,max=4,message="Assessment Year must be exactly 4 Digits")
    public Integer assessmentYear;

    @Column
    public String ownerName;

    @Column
    public String email;

    @Column
    public String address;

    @Column
    public String zonalClassification;

    @Column
    public String description;

    @Column
    public String status;

    @Column
    public Integer constructedYear;

    @Column
    public Integer builtUpArea;

    @Column
    public double totalPropertyTax;

	public int getID() {
		return ID;
	}

	public void setID(int iD) {
		ID = iD;
	}

	public Integer getAssessmentYear() {
		return assessmentYear;
	}

	public void setAssessmentYear(Integer assessmentYear) {
		this.assessmentYear = assessmentYear;
	}

	public String getOwnerName() {
		return ownerName;
	}

	public void setOwnerName(String ownerName) {
		this.ownerName = ownerName;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public String getZonalClassification() {
		return zonalClassification;
	}

	public void setZonalClassification(String zonalClassification) {
		this.zonalClassification = zonalClassification;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public Integer getConstructedYear() {
		return constructedYear;
	}

	public void setConstructedYear(Integer constructedYear) {
		this.constructedYear = constructedYear;
	}

	public Integer getBuiltUpArea() {
		return builtUpArea;
	}

	public void setBuiltUpArea(Integer builtUpArea) {
		this.builtUpArea = builtUpArea;
	}

	public double getTotalPropertyTax() {
		return totalPropertyTax;
	}

	public void setTotalPropertyTax(double totalPropertyTax) {
		this.totalPropertyTax = totalPropertyTax;
	}

	@Override
	public String toString() {
		return "ResidentialProperty [ID=" + ID + ", assessmentYear=" + assessmentYear + ", ownerName=" + ownerName
				+ ", email=" + email + ", address=" + address + ", zonalClassification=" + zonalClassification
				+ ", description=" + description + ", status=" + status + ", constructedYear=" + constructedYear
				+ ", builtUpArea=" + builtUpArea + ", totalPropertyTax=" + totalPropertyTax + "]";
	}

	@Override
	public int hashCode() {
		return Objects.hash(ID, address, assessmentYear, builtUpArea, constructedYear, description, email, ownerName,
				status, totalPropertyTax, zonalClassification);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ResidentialProperty other = (ResidentialProperty) obj;
		return ID == other.ID && Objects.equals(address, other.address)
				&& Objects.equals(assessmentYear, other.assessmentYear)
				&& Objects.equals(builtUpArea, other.builtUpArea)
				&& Objects.equals(constructedYear, other.constructedYear)
				&& Objects.equals(description, other.description) && Objects.equals(email, other.email)
				&& Objects.equals(ownerName, other.ownerName) && Objects.equals(status, other.status)
				&& Double.doubleToLongBits(totalPropertyTax) == Double.doubleToLongBits(other.totalPropertyTax)
				&& Objects.equals(zonalClassification, other.zonalClassification);
	}
}
